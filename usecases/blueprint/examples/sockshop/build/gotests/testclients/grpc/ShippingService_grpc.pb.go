// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: ShippingService.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingService_OTServerWrapperInterfaceClient is the client API for ShippingService_OTServerWrapperInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingService_OTServerWrapperInterfaceClient interface {
	GetShipment(ctx context.Context, in *ShippingService_OTServerWrapperInterface_GetShipment_Request, opts ...grpc.CallOption) (*ShippingService_OTServerWrapperInterface_GetShipment_Response, error)
	PostShipping(ctx context.Context, in *ShippingService_OTServerWrapperInterface_PostShipping_Request, opts ...grpc.CallOption) (*ShippingService_OTServerWrapperInterface_PostShipping_Response, error)
	UpdateStatus(ctx context.Context, in *ShippingService_OTServerWrapperInterface_UpdateStatus_Request, opts ...grpc.CallOption) (*ShippingService_OTServerWrapperInterface_UpdateStatus_Response, error)
}

type shippingService_OTServerWrapperInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingService_OTServerWrapperInterfaceClient(cc grpc.ClientConnInterface) ShippingService_OTServerWrapperInterfaceClient {
	return &shippingService_OTServerWrapperInterfaceClient{cc}
}

func (c *shippingService_OTServerWrapperInterfaceClient) GetShipment(ctx context.Context, in *ShippingService_OTServerWrapperInterface_GetShipment_Request, opts ...grpc.CallOption) (*ShippingService_OTServerWrapperInterface_GetShipment_Response, error) {
	out := new(ShippingService_OTServerWrapperInterface_GetShipment_Response)
	err := c.cc.Invoke(ctx, "/grpc.ShippingService_OTServerWrapperInterface/GetShipment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService_OTServerWrapperInterfaceClient) PostShipping(ctx context.Context, in *ShippingService_OTServerWrapperInterface_PostShipping_Request, opts ...grpc.CallOption) (*ShippingService_OTServerWrapperInterface_PostShipping_Response, error) {
	out := new(ShippingService_OTServerWrapperInterface_PostShipping_Response)
	err := c.cc.Invoke(ctx, "/grpc.ShippingService_OTServerWrapperInterface/PostShipping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingService_OTServerWrapperInterfaceClient) UpdateStatus(ctx context.Context, in *ShippingService_OTServerWrapperInterface_UpdateStatus_Request, opts ...grpc.CallOption) (*ShippingService_OTServerWrapperInterface_UpdateStatus_Response, error) {
	out := new(ShippingService_OTServerWrapperInterface_UpdateStatus_Response)
	err := c.cc.Invoke(ctx, "/grpc.ShippingService_OTServerWrapperInterface/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingService_OTServerWrapperInterfaceServer is the server API for ShippingService_OTServerWrapperInterface service.
// All implementations must embed UnimplementedShippingService_OTServerWrapperInterfaceServer
// for forward compatibility
type ShippingService_OTServerWrapperInterfaceServer interface {
	GetShipment(context.Context, *ShippingService_OTServerWrapperInterface_GetShipment_Request) (*ShippingService_OTServerWrapperInterface_GetShipment_Response, error)
	PostShipping(context.Context, *ShippingService_OTServerWrapperInterface_PostShipping_Request) (*ShippingService_OTServerWrapperInterface_PostShipping_Response, error)
	UpdateStatus(context.Context, *ShippingService_OTServerWrapperInterface_UpdateStatus_Request) (*ShippingService_OTServerWrapperInterface_UpdateStatus_Response, error)
	mustEmbedUnimplementedShippingService_OTServerWrapperInterfaceServer()
}

// UnimplementedShippingService_OTServerWrapperInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedShippingService_OTServerWrapperInterfaceServer struct {
}

func (UnimplementedShippingService_OTServerWrapperInterfaceServer) GetShipment(context.Context, *ShippingService_OTServerWrapperInterface_GetShipment_Request) (*ShippingService_OTServerWrapperInterface_GetShipment_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipment not implemented")
}
func (UnimplementedShippingService_OTServerWrapperInterfaceServer) PostShipping(context.Context, *ShippingService_OTServerWrapperInterface_PostShipping_Request) (*ShippingService_OTServerWrapperInterface_PostShipping_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostShipping not implemented")
}
func (UnimplementedShippingService_OTServerWrapperInterfaceServer) UpdateStatus(context.Context, *ShippingService_OTServerWrapperInterface_UpdateStatus_Request) (*ShippingService_OTServerWrapperInterface_UpdateStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedShippingService_OTServerWrapperInterfaceServer) mustEmbedUnimplementedShippingService_OTServerWrapperInterfaceServer() {
}

// UnsafeShippingService_OTServerWrapperInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingService_OTServerWrapperInterfaceServer will
// result in compilation errors.
type UnsafeShippingService_OTServerWrapperInterfaceServer interface {
	mustEmbedUnimplementedShippingService_OTServerWrapperInterfaceServer()
}

func RegisterShippingService_OTServerWrapperInterfaceServer(s grpc.ServiceRegistrar, srv ShippingService_OTServerWrapperInterfaceServer) {
	s.RegisterService(&ShippingService_OTServerWrapperInterface_ServiceDesc, srv)
}

func _ShippingService_OTServerWrapperInterface_GetShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingService_OTServerWrapperInterface_GetShipment_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingService_OTServerWrapperInterfaceServer).GetShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ShippingService_OTServerWrapperInterface/GetShipment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingService_OTServerWrapperInterfaceServer).GetShipment(ctx, req.(*ShippingService_OTServerWrapperInterface_GetShipment_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_OTServerWrapperInterface_PostShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingService_OTServerWrapperInterface_PostShipping_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingService_OTServerWrapperInterfaceServer).PostShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ShippingService_OTServerWrapperInterface/PostShipping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingService_OTServerWrapperInterfaceServer).PostShipping(ctx, req.(*ShippingService_OTServerWrapperInterface_PostShipping_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_OTServerWrapperInterface_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShippingService_OTServerWrapperInterface_UpdateStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingService_OTServerWrapperInterfaceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ShippingService_OTServerWrapperInterface/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingService_OTServerWrapperInterfaceServer).UpdateStatus(ctx, req.(*ShippingService_OTServerWrapperInterface_UpdateStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingService_OTServerWrapperInterface_ServiceDesc is the grpc.ServiceDesc for ShippingService_OTServerWrapperInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingService_OTServerWrapperInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ShippingService_OTServerWrapperInterface",
	HandlerType: (*ShippingService_OTServerWrapperInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShipment",
			Handler:    _ShippingService_OTServerWrapperInterface_GetShipment_Handler,
		},
		{
			MethodName: "PostShipping",
			Handler:    _ShippingService_OTServerWrapperInterface_PostShipping_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ShippingService_OTServerWrapperInterface_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ShippingService.proto",
}
