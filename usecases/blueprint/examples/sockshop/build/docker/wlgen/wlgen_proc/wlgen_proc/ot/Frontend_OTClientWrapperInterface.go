// Blueprint: Auto-generated by OT Plugin
package ot

import (
	"context"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
)

type Frontend_OTClientWrapperInterface interface {
	AddItem(ctx context.Context, sessionID string, itemID string) (string, error)
	DeleteCart(ctx context.Context, sessionID string) (error)
	GetAddress(ctx context.Context, addressID string) (user.Address, error)
	GetCard(ctx context.Context, cardID string) (user.Card, error)
	GetCart(ctx context.Context, sessionID string) ([]cart.Item, error)
	GetOrder(ctx context.Context, orderID string) (order.Order, error)
	GetOrders(ctx context.Context, userID string) ([]order.Order, error)
	GetSock(ctx context.Context, itemID string) (catalogue.Sock, error)
	GetUser(ctx context.Context, userID string) (user.User, error)
	ListItems(ctx context.Context, tags []string, order string, pageNum int, pageSize int) ([]catalogue.Sock, error)
	ListTags(ctx context.Context) ([]string, error)
	LoadCatalogue(ctx context.Context) (string, error)
	Login(ctx context.Context, sessionID string, username string, password string) (string, user.User, error)
	NewOrder(ctx context.Context, userID string, addressID string, cardID string, cartID string) (order.Order, error)
	PostAddress(ctx context.Context, userID string, address user.Address) (string, error)
	PostCard(ctx context.Context, userID string, card user.Card) (string, error)
	Register(ctx context.Context, sessionID string, username string, password string, email string, first string, last string) (string, error)
	RemoveItem(ctx context.Context, sessionID string, itemID string) (error)
	UpdateItem(ctx context.Context, sessionID string, itemID string, quantity int) (string, error)
	
}

type Frontend_OTClientWrapper struct {
	Client Frontend_OTServerWrapperInterface
	CollClient backend.Tracer
}

func New_Frontend_OTClientWrapper(ctx context.Context, client Frontend_OTServerWrapperInterface, coll_client backend.Tracer) (*Frontend_OTClientWrapper, error) {
	handler := &Frontend_OTClientWrapper{}
	handler.Client = client
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *Frontend_OTClientWrapper) AddItem(ctx context.Context, sessionID string, itemID string) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "AddItem start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.AddItem(ctx, sessionID, itemID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) DeleteCart(ctx context.Context, sessionID string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "DeleteCart start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.DeleteCart(ctx, sessionID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) GetAddress(ctx context.Context, addressID string) (ret0 user.Address, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GetAddress start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetAddress(ctx, addressID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) GetCard(ctx context.Context, cardID string) (ret0 user.Card, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GetCard start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetCard(ctx, cardID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) GetCart(ctx context.Context, sessionID string) (ret0 []cart.Item, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GetCart start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetCart(ctx, sessionID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) GetOrder(ctx context.Context, orderID string) (ret0 order.Order, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GetOrder start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetOrder(ctx, orderID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) GetOrders(ctx context.Context, userID string) (ret0 []order.Order, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GetOrders start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetOrders(ctx, userID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) GetSock(ctx context.Context, itemID string) (ret0 catalogue.Sock, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GetSock start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetSock(ctx, itemID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) GetUser(ctx context.Context, userID string) (ret0 user.User, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GetUser start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetUser(ctx, userID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) ListItems(ctx context.Context, tags []string, order string, pageNum int, pageSize int) (ret0 []catalogue.Sock, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "ListItems start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.ListItems(ctx, tags, order, pageNum, pageSize, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) ListTags(ctx context.Context) (ret0 []string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "ListTags start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.ListTags(ctx, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) LoadCatalogue(ctx context.Context) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "LoadCatalogue start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.LoadCatalogue(ctx, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) Login(ctx context.Context, sessionID string, username string, password string) (ret0 string, ret1 user.User, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "Login start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, ret1, err = handler.Client.Login(ctx, sessionID, username, password, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) NewOrder(ctx context.Context, userID string, addressID string, cardID string, cartID string) (ret0 order.Order, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "NewOrder start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.NewOrder(ctx, userID, addressID, cardID, cartID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) PostAddress(ctx context.Context, userID string, address user.Address) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "PostAddress start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.PostAddress(ctx, userID, address, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) PostCard(ctx context.Context, userID string, card user.Card) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "PostCard start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.PostCard(ctx, userID, card, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) Register(ctx context.Context, sessionID string, username string, password string, email string, first string, last string) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "Register start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.Register(ctx, sessionID, username, password, email, first, last, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) RemoveItem(ctx context.Context, sessionID string, itemID string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "RemoveItem start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.RemoveItem(ctx, sessionID, itemID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTClientWrapper) UpdateItem(ctx context.Context, sessionID string, itemID string, quantity int) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UpdateItem start")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.UpdateItem(ctx, sessionID, itemID, quantity, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

