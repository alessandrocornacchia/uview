// Blueprint: Auto-generated by HTTP Plugin
package http

import (
	"log"
	"blueprint/goproc/frontend_service_process/ot"
	"github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow/hotelreservation"
	"context"
	"encoding/json"
	"net/http"
	"github.com/gorilla/mux"
)

type FrontEndService_HTTPServerHandler struct {
	Service ot.FrontEndService_OTServerWrapperInterface
	Address string
}

func New_FrontEndService_HTTPServerHandler(ctx context.Context, service ot.FrontEndService_OTServerWrapperInterface, serverAddress string) (*FrontEndService_HTTPServerHandler, error) {
	handler := &FrontEndService_HTTPServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *FrontEndService_HTTPServerHandler) Run(ctx context.Context) error {
	router := mux.NewRouter()
	// Add paths for the mux router
	
	router.Path("/RecommendHandler").HandlerFunc(handler.RecommendHandler)
	
	router.Path("/ReservationHandler").HandlerFunc(handler.ReservationHandler)
	
	router.Path("/SearchHandler").HandlerFunc(handler.SearchHandler)
	
	router.Path("/UserHandler").HandlerFunc(handler.UserHandler)
	
	srv := &http.Server {
		Addr: handler.Address,
		Handler: router,
	}

	go func() {
		select {
		case <-ctx.Done():
			srv.Shutdown(ctx)
		}
	}()

	return srv.ListenAndServe()
}


func (handler *FrontEndService_HTTPServerHandler) RecommendHandler(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	request_lat := r.URL.Query().Get("lat")
	var lat float64
	if request_lat != "" {
		err = json.Unmarshal([]byte(request_lat), &lat)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_lon := r.URL.Query().Get("lon")
	var lon float64
	if request_lon != "" {
		err = json.Unmarshal([]byte(request_lon), &lon)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	require := r.URL.Query().Get("require")
	
	locale := r.URL.Query().Get("locale")
	
	traceCtx := r.URL.Query().Get("traceCtx")
	
	ctx := context.Background()
	ret0, err := handler.Service.RecommendHandler(ctx, lat, lon, require, locale, traceCtx)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 []hotelreservation.HotelProfile
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontEndService_HTTPServerHandler) ReservationHandler(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	inDate := r.URL.Query().Get("inDate")
	
	outDate := r.URL.Query().Get("outDate")
	
	hotelId := r.URL.Query().Get("hotelId")
	
	customerName := r.URL.Query().Get("customerName")
	
	username := r.URL.Query().Get("username")
	
	password := r.URL.Query().Get("password")
	
	request_roomNumber := r.URL.Query().Get("roomNumber")
	var roomNumber int64
	if request_roomNumber != "" {
		err = json.Unmarshal([]byte(request_roomNumber), &roomNumber)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	traceCtx := r.URL.Query().Get("traceCtx")
	
	ctx := context.Background()
	ret0, err := handler.Service.ReservationHandler(ctx, inDate, outDate, hotelId, customerName, username, password, roomNumber, traceCtx)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontEndService_HTTPServerHandler) SearchHandler(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	customerName := r.URL.Query().Get("customerName")
	
	inDate := r.URL.Query().Get("inDate")
	
	outDate := r.URL.Query().Get("outDate")
	
	request_lat := r.URL.Query().Get("lat")
	var lat float64
	if request_lat != "" {
		err = json.Unmarshal([]byte(request_lat), &lat)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_lon := r.URL.Query().Get("lon")
	var lon float64
	if request_lon != "" {
		err = json.Unmarshal([]byte(request_lon), &lon)
		if err != nil {
			log.Println(err.Error())
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	locale := r.URL.Query().Get("locale")
	
	traceCtx := r.URL.Query().Get("traceCtx")
	
	ctx := context.Background()
	ret0, err := handler.Service.SearchHandler(ctx, customerName, inDate, outDate, lat, lon, locale, traceCtx)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 []hotelreservation.HotelProfile
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontEndService_HTTPServerHandler) UserHandler(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	username := r.URL.Query().Get("username")
	
	password := r.URL.Query().Get("password")
	
	traceCtx := r.URL.Query().Get("traceCtx")
	
	ctx := context.Background()
	ret0, err := handler.Service.UserHandler(ctx, username, password, traceCtx)
	if err != nil {
		log.Println(err.Error())
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

