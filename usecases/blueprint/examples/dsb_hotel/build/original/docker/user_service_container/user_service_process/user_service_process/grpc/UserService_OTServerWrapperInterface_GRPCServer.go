// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"context"
	"net"
	"google.golang.org/grpc"
	"blueprint/goproc/user_service_process/ot"
)

type UserService_GRPCServerHandler struct {
	UnimplementedUserService_OTServerWrapperInterfaceServer
	Service ot.UserService_OTServerWrapperInterface
	Address string
}

func New_UserService_GRPCServerHandler(ctx context.Context, service ot.UserService_OTServerWrapperInterface, serverAddress string) (*UserService_GRPCServerHandler, error) {
	handler := &UserService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *UserService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterUserService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *UserService_GRPCServerHandler) CheckUser(ctx context.Context, req *UserService_OTServerWrapperInterface_CheckUser_Request) (*UserService_OTServerWrapperInterface_CheckUser_Response, error) {
	username, password, traceCtx := req.unmarshall()
	ret0, err := handler.Service.CheckUser(ctx, username, password, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_CheckUser_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

