// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"time"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"blueprint/goproc/frontend_service_process/ot"
	"context"
)

type RecommendationService_GRPCClient struct {
	ot.RecommendationService_OTServerWrapperInterface
	Client RecommendationService_OTServerWrapperInterfaceClient // The actual GRPC-generated client
	Timeout time.Duration
}

func New_RecommendationService_GRPCClient(ctx context.Context, serverAddress string) (*RecommendationService_GRPCClient, error) {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	opts = append(opts, grpc.WithTimeout(duration))
	conn, err := grpc.Dial(serverAddress, opts...)
	if err != nil {
		return nil, err
	}

	c := &RecommendationService_GRPCClient{}
	c.Client = NewRecommendationService_OTServerWrapperInterfaceClient(conn)
	c.Timeout = duration
	return c, nil
}


func (client *RecommendationService_GRPCClient) GetRecommendations(ctx context.Context, require string, lat float64, lon float64, traceCtx string) (ret0 []string, err error) {
	// Create and marshall the GRPC Request object
	req := &RecommendationService_OTServerWrapperInterface_GetRecommendations_Request{}
	req.marshall(require, lat, lon, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.GetRecommendations(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

