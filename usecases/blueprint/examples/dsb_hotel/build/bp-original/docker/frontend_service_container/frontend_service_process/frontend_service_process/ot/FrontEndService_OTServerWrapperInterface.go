// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"context"
	"go.opentelemetry.io/otel/trace"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow/hotelreservation"
)

type FrontEndService_OTServerWrapperInterface interface {
	RecommendHandler(ctx context.Context, lat float64, lon float64, require string, locale string, traceCtx string) ([]hotelreservation.HotelProfile, error)
	ReservationHandler(ctx context.Context, inDate string, outDate string, hotelId string, customerName string, username string, password string, roomNumber int64, traceCtx string) (string, error)
	SearchHandler(ctx context.Context, customerName string, inDate string, outDate string, lat float64, lon float64, locale string, traceCtx string) ([]hotelreservation.HotelProfile, error)
	UserHandler(ctx context.Context, username string, password string, traceCtx string) (string, error)
	
}

type FrontEndService_OTServerWrapper struct {
	Service hotelreservation.FrontEndService
	CollClient backend.Tracer
}

func New_FrontEndService_OTServerWrapper(ctx context.Context, service hotelreservation.FrontEndService, coll_client backend.Tracer) (*FrontEndService_OTServerWrapper, error) {
	handler := &FrontEndService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *FrontEndService_OTServerWrapper) RecommendHandler(ctx context.Context, lat float64, lon float64, require string, locale string, traceCtx string) (ret0 []hotelreservation.HotelProfile, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("FrontEndService")
	ctx, span := tr.Start(ctx, "RecommendHandler start")
	defer span.End()
	ret0, err = handler.Service.RecommendHandler(ctx, lat, lon, require, locale)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *FrontEndService_OTServerWrapper) ReservationHandler(ctx context.Context, inDate string, outDate string, hotelId string, customerName string, username string, password string, roomNumber int64, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("FrontEndService")
	ctx, span := tr.Start(ctx, "ReservationHandler start")
	defer span.End()
	ret0, err = handler.Service.ReservationHandler(ctx, inDate, outDate, hotelId, customerName, username, password, roomNumber)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *FrontEndService_OTServerWrapper) SearchHandler(ctx context.Context, customerName string, inDate string, outDate string, lat float64, lon float64, locale string, traceCtx string) (ret0 []hotelreservation.HotelProfile, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("FrontEndService")
	ctx, span := tr.Start(ctx, "SearchHandler start")
	defer span.End()
	ret0, err = handler.Service.SearchHandler(ctx, customerName, inDate, outDate, lat, lon, locale)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *FrontEndService_OTServerWrapper) UserHandler(ctx context.Context, username string, password string, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("FrontEndService")
	ctx, span := tr.Start(ctx, "UserHandler start")
	defer span.End()
	ret0, err = handler.Service.UserHandler(ctx, username, password)
	if err != nil {
		span.RecordError(err)
	}
	return
}

