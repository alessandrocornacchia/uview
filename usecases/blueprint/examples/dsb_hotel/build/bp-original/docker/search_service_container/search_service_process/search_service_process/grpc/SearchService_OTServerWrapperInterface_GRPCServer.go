// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"net"
	"google.golang.org/grpc"
	"blueprint/goproc/search_service_process/ot"
	"context"
)

type SearchService_GRPCServerHandler struct {
	UnimplementedSearchService_OTServerWrapperInterfaceServer
	Service ot.SearchService_OTServerWrapperInterface
	Address string
}

func New_SearchService_GRPCServerHandler(ctx context.Context, service ot.SearchService_OTServerWrapperInterface, serverAddress string) (*SearchService_GRPCServerHandler, error) {
	handler := &SearchService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *SearchService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterSearchService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *SearchService_GRPCServerHandler) Nearby(ctx context.Context, req *SearchService_OTServerWrapperInterface_Nearby_Request) (*SearchService_OTServerWrapperInterface_Nearby_Response, error) {
	lat, lon, inDate, outDate, traceCtx := req.unmarshall()
	ret0, err := handler.Service.Nearby(ctx, lat, lon, inDate, outDate, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &SearchService_OTServerWrapperInterface_Nearby_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

