// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow/hotelreservation"
	"context"
	"go.opentelemetry.io/otel/trace"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
)

type SearchService_OTServerWrapperInterface interface {
	Nearby(ctx context.Context, lat float64, lon float64, inDate string, outDate string, traceCtx string) ([]string, error)
	
}

type SearchService_OTServerWrapper struct {
	Service hotelreservation.SearchService
	CollClient backend.Tracer
}

func New_SearchService_OTServerWrapper(ctx context.Context, service hotelreservation.SearchService, coll_client backend.Tracer) (*SearchService_OTServerWrapper, error) {
	handler := &SearchService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *SearchService_OTServerWrapper) Nearby(ctx context.Context, lat float64, lon float64, inDate string, outDate string, traceCtx string) (ret0 []string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("SearchService")
	ctx, span := tr.Start(ctx, "Nearby start")
	defer span.End()
	ret0, err = handler.Service.Nearby(ctx, lat, lon, inDate, outDate)
	if err != nil {
		span.RecordError(err)
	}
	return
}

