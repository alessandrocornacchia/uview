// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the user_service_process namespace.
//
// To instantiate the user_service_process namespace, first call [New_user_service_process] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow/hotelreservation"
	"blueprint/goproc/user_service_process/grpc"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/slogger"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/mongodb"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/opentelemetry"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/jaeger"
	"blueprint/goproc/user_service_process/ot"
)

// Initializes the user_service_process namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_user_service_process(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_user_service_process_Args(b)
	set_user_service_process_Instances(b)
	set_user_service_process_Definitions(b)
	return b
}

// user_service_process requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//   jaeger.dial_addr
//   user_db.dial_addr
//   user_service.grpc.bind_addr
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_user_service_process_Args(b *golang.NamespaceBuilder) {
	b.Required("jaeger.dial_addr", "Argument generated by Blueprint IR: jaeger.dial_addr = AddressConfig()")
	b.Required("user_db.dial_addr", "Argument generated by Blueprint IR: user_db.dial_addr = AddressConfig()")
	b.Required("user_service.grpc.bind_addr", "Argument generated by Blueprint IR: user_service.grpc.bind_addr = AddressConfig()")
}

// When the user_service_process namespace is built it will automatically instantiate
// the following nodes:
//   user_service_process.stdoutmetriccollector
//   user_service_process.logger
//   user_db.client
//   user_service
//   jaeger.client
//   user_service.server.ot
//   user_service.grpc_server
func set_user_service_process_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("user_service_process.stdoutmetriccollector")
	b.Instantiate("user_service_process.logger")
	b.Instantiate("user_db.client")
	b.Instantiate("user_service")
	b.Instantiate("jaeger.client")
	b.Instantiate("user_service.server.ot")
	b.Instantiate("user_service.grpc_server")
}

// The user_service_process namespace contains definitions for instantiating
// the following nodes:
//   jaeger.client
//   user_db.client
//   user_service
//   user_service.grpc_server
//   user_service.server.ot
//   user_service_process.logger
//   user_service_process.stdoutmetriccollector
func set_user_service_process_Definitions(b *golang.NamespaceBuilder) {
	b.Define("jaeger.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("jaeger.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return jaeger.NewJaegerTracer(n.Context(), addr)
	})
	
	b.Define("user_db.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("user_db.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return mongodb.NewMongoDB(n.Context(), addr)
	})
	
	b.Define("user_service", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var userDB backend.NoSQLDatabase
		if err := n.Get("user_db.client", &userDB); err != nil {
			return nil, err
		}
		
		return hotelreservation.NewUserServiceImpl(n.Context(), userDB)
	})
	
	b.Define("user_service.grpc_server", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service ot.UserService_OTServerWrapperInterface
		if err := n.Get("user_service.server.ot", &service); err != nil {
			return nil, err
		}
		
		var serverAddr string
		if err := n.Get("user_service.grpc.bind_addr", &serverAddr); err != nil {
			return nil, err
		}
		
		return grpc.New_UserService_GRPCServerHandler(n.Context(), service, serverAddr)
	})
	
	b.Define("user_service.server.ot", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service hotelreservation.UserService
		if err := n.Get("user_service", &service); err != nil {
			return nil, err
		}
		
		var otCollectorClient backend.Tracer
		if err := n.Get("jaeger.client", &otCollectorClient); err != nil {
			return nil, err
		}
		
		return ot.New_UserService_OTServerWrapper(n.Context(), service, otCollectorClient)
	})
	
	b.Define("user_service_process.logger", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return slogger.NewSLogger(n.Context())
	})
	
	b.Define("user_service_process.stdoutmetriccollector", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return opentelemetry.NewStdoutMetricCollector(n.Context())
	})
	
}
