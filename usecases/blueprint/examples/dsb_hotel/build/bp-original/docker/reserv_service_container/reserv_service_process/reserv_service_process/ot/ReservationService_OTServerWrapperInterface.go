// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"go.opentelemetry.io/otel/trace"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow/hotelreservation"
	"context"
)

type ReservationService_OTServerWrapperInterface interface {
	CheckAvailability(ctx context.Context, customerName string, hotelIDs []string, inDate string, outDate string, roomNumber int64, traceCtx string) ([]string, error)
	MakeReservation(ctx context.Context, customerName string, hotelIds []string, inDate string, outDate string, roomNumber int64, traceCtx string) ([]string, error)
	
}

type ReservationService_OTServerWrapper struct {
	Service hotelreservation.ReservationService
	CollClient backend.Tracer
}

func New_ReservationService_OTServerWrapper(ctx context.Context, service hotelreservation.ReservationService, coll_client backend.Tracer) (*ReservationService_OTServerWrapper, error) {
	handler := &ReservationService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *ReservationService_OTServerWrapper) CheckAvailability(ctx context.Context, customerName string, hotelIDs []string, inDate string, outDate string, roomNumber int64, traceCtx string) (ret0 []string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("ReservationService")
	ctx, span := tr.Start(ctx, "CheckAvailability start")
	defer span.End()
	ret0, err = handler.Service.CheckAvailability(ctx, customerName, hotelIDs, inDate, outDate, roomNumber)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *ReservationService_OTServerWrapper) MakeReservation(ctx context.Context, customerName string, hotelIds []string, inDate string, outDate string, roomNumber int64, traceCtx string) (ret0 []string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("ReservationService")
	ctx, span := tr.Start(ctx, "MakeReservation start")
	defer span.End()
	ret0, err = handler.Service.MakeReservation(ctx, customerName, hotelIds, inDate, outDate, roomNumber)
	if err != nil {
		span.RecordError(err)
	}
	return
}

