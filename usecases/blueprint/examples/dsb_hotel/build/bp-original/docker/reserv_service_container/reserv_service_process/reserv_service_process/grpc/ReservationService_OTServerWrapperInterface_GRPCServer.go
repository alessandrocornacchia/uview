// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"context"
	"net"
	"google.golang.org/grpc"
	"blueprint/goproc/reserv_service_process/ot"
)

type ReservationService_GRPCServerHandler struct {
	UnimplementedReservationService_OTServerWrapperInterfaceServer
	Service ot.ReservationService_OTServerWrapperInterface
	Address string
}

func New_ReservationService_GRPCServerHandler(ctx context.Context, service ot.ReservationService_OTServerWrapperInterface, serverAddress string) (*ReservationService_GRPCServerHandler, error) {
	handler := &ReservationService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *ReservationService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterReservationService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *ReservationService_GRPCServerHandler) CheckAvailability(ctx context.Context, req *ReservationService_OTServerWrapperInterface_CheckAvailability_Request) (*ReservationService_OTServerWrapperInterface_CheckAvailability_Response, error) {
	customerName, hotelIDs, inDate, outDate, roomNumber, traceCtx := req.unmarshall()
	ret0, err := handler.Service.CheckAvailability(ctx, customerName, hotelIDs, inDate, outDate, roomNumber, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &ReservationService_OTServerWrapperInterface_CheckAvailability_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *ReservationService_GRPCServerHandler) MakeReservation(ctx context.Context, req *ReservationService_OTServerWrapperInterface_MakeReservation_Request) (*ReservationService_OTServerWrapperInterface_MakeReservation_Response, error) {
	customerName, hotelIds, inDate, outDate, roomNumber, traceCtx := req.unmarshall()
	ret0, err := handler.Service.MakeReservation(ctx, customerName, hotelIds, inDate, outDate, roomNumber, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &ReservationService_OTServerWrapperInterface_MakeReservation_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

