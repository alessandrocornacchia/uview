// Blueprint: Auto-generated by the HTTP Plugin
package http

import (
	"github.com/blueprint-uservices/blueprint/examples/dsb_hotel/workflow/hotelreservation"
	"net/http"
	"encoding/json"
	"context"
	"time"
	"net/url"
	"fmt"
	"io"
)

type FrontEndService_HTTPClient struct {
	Client *http.Client
	Timeout time.Duration
	ServerAddress string
}

func New_FrontEndService_HTTPClient(ctx context.Context, serverAddress string) (*FrontEndService_HTTPClient, error) {
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	client := &http.Client{
		Timeout: duration,
	}
	c := &FrontEndService_HTTPClient{}
	c.Client = client
	c.Timeout = duration
	c.ServerAddress = "http://" + serverAddress
	return c, nil
}


func (client *FrontEndService_HTTPClient) RecommendHandler(ctx context.Context, lat float64, lon float64, require string, locale string, traceCtx string) (ret0 []hotelreservation.HotelProfile, err error) {
	vals := url.Values{}
	
	bytes_lat, err := json.Marshal(lat)
	if err != nil {
		return
	}
	vals.Add("lat", string(bytes_lat))
	
	bytes_lon, err := json.Marshal(lon)
	if err != nil {
		return
	}
	vals.Add("lon", string(bytes_lon))
	
	vals.Add("require", require)
	
	vals.Add("locale", locale)
	
	vals.Add("traceCtx", traceCtx)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/RecommendHandler")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 []hotelreservation.HotelProfile
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *FrontEndService_HTTPClient) ReservationHandler(ctx context.Context, inDate string, outDate string, hotelId string, customerName string, username string, password string, roomNumber int64, traceCtx string) (ret0 string, err error) {
	vals := url.Values{}
	
	vals.Add("inDate", inDate)
	
	vals.Add("outDate", outDate)
	
	vals.Add("hotelId", hotelId)
	
	vals.Add("customerName", customerName)
	
	vals.Add("username", username)
	
	vals.Add("password", password)
	
	bytes_roomNumber, err := json.Marshal(roomNumber)
	if err != nil {
		return
	}
	vals.Add("roomNumber", string(bytes_roomNumber))
	
	vals.Add("traceCtx", traceCtx)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/ReservationHandler")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *FrontEndService_HTTPClient) SearchHandler(ctx context.Context, customerName string, inDate string, outDate string, lat float64, lon float64, locale string, traceCtx string) (ret0 []hotelreservation.HotelProfile, err error) {
	vals := url.Values{}
	
	vals.Add("customerName", customerName)
	
	vals.Add("inDate", inDate)
	
	vals.Add("outDate", outDate)
	
	bytes_lat, err := json.Marshal(lat)
	if err != nil {
		return
	}
	vals.Add("lat", string(bytes_lat))
	
	bytes_lon, err := json.Marshal(lon)
	if err != nil {
		return
	}
	vals.Add("lon", string(bytes_lon))
	
	vals.Add("locale", locale)
	
	vals.Add("traceCtx", traceCtx)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/SearchHandler")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 []hotelreservation.HotelProfile
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *FrontEndService_HTTPClient) UserHandler(ctx context.Context, username string, password string, traceCtx string) (ret0 string, err error) {
	vals := url.Values{}
	
	vals.Add("username", username)
	
	vals.Add("password", password)
	
	vals.Add("traceCtx", traceCtx)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/UserHandler")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

